

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Sep  3 15:29:03 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Version 2.40
    24                           ; Generated 04/07/2022 GMT
    25                           ; 
    26                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F45K50 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58   000000                     
    59                           	psect	idataCOMRAM
    60   007AB8                     __pidataCOMRAM:
    61                           	callstack 0
    62                           
    63                           ;initializer for _display
    64   007AB8  40                 	db	64
    65   007AB9  79                 	db	121
    66   007ABA  24                 	db	36
    67   007ABB  30                 	db	48
    68   007ABC  19                 	db	25
    69   007ABD  12                 	db	18
    70   007ABE  02                 	db	2
    71   007ABF  78                 	db	120
    72   007AC0  00                 	db	0
    73   007AC1  10                 	db	16
    74   000000                     _LATB5	set	31829
    75   000000                     _LATB4	set	31828
    76   000000                     _LATB3	set	31827
    77   000000                     _ANSELBbits	set	3932
    78   000000                     _ANSELD	set	3934
    79   000000                     _PORTBbits	set	3969
    80   000000                     _LATD	set	3980
    81   000000                     _TRISD	set	3989
    82   000000                     _LATB6	set	31830
    83   000000                     _OSCCONbits	set	4051
    84   000000                     _TRISBbits	set	3987
    85                           
    86                           ; #config settings
    87                           
    88                           	psect	cinit
    89   007AC2                     __pcinit:
    90                           	callstack 0
    91   007AC2                     start_initialization:
    92                           	callstack 0
    93   007AC2                     __initialization:
    94                           	callstack 0
    95                           
    96                           ; Initialize objects allocated to COMRAM (10 bytes)
    97                           ; load TBLPTR registers with __pidataCOMRAM
    98   007AC2  0EB8               	movlw	low __pidataCOMRAM
    99   007AC4  6EF6               	movwf	tblptrl,c
   100   007AC6  0E7A               	movlw	high __pidataCOMRAM
   101   007AC8  6EF7               	movwf	tblptrh,c
   102   007ACA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   103   007ACC  6EF8               	movwf	tblptru,c
   104   007ACE  EE00  F026         	lfsr	0,__pdataCOMRAM
   105   007AD2  EE10 F00A          	lfsr	1,10
   106   007AD6                     copy_data0:
   107   007AD6  0009               	tblrd		*+
   108   007AD8  CFF5 FFEE          	movff	tablat,postinc0
   109   007ADC  50E5               	movf	postdec1,w,c
   110   007ADE  50E1               	movf	fsr1l,w,c
   111   007AE0  E1FA               	bnz	copy_data0
   112   007AE2                     end_of_initialization:
   113                           	callstack 0
   114   007AE2                     __end_of__initialization:
   115                           	callstack 0
   116   007AE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   117   007AE4  6EF8               	movwf	tblptru,c
   118   007AE6  0100               	movlb	0
   119   007AE8  EFE3  F03E         	goto	_main	;jump to C main() function
   120                           
   121                           	psect	dataCOMRAM
   122   000026                     __pdataCOMRAM:
   123                           	callstack 0
   124   000026                     _display:
   125                           	callstack 0
   126   000026                     	ds	10
   127                           
   128                           	psect	cstackCOMRAM
   129   000001                     __pcstackCOMRAM:
   130                           	callstack 0
   131   000001                     ?___lwmod:
   132                           	callstack 0
   133   000001                     ___lwmod@dividend:
   134                           	callstack 0
   135                           
   136                           ; 2 bytes @ 0x0
   137   000001                     	ds	2
   138   000003                     ___lwmod@divisor:
   139                           	callstack 0
   140                           
   141                           ; 2 bytes @ 0x2
   142   000003                     	ds	2
   143   000005                     ___lwmod@counter:
   144                           	callstack 0
   145                           
   146                           ; 1 bytes @ 0x4
   147   000005                     	ds	1
   148   000006                     ?___lwdiv:
   149                           	callstack 0
   150   000006                     ___lwdiv@dividend:
   151                           	callstack 0
   152                           
   153                           ; 2 bytes @ 0x5
   154   000006                     	ds	2
   155   000008                     ___lwdiv@divisor:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x7
   159   000008                     	ds	2
   160   00000A                     ___lwdiv@quotient:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x9
   164   00000A                     	ds	2
   165   00000C                     ___lwdiv@counter:
   166                           	callstack 0
   167                           
   168                           ; 1 bytes @ 0xB
   169   00000C                     	ds	1
   170   00000D                     descomponiendo@numero:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0xC
   174   00000D                     	ds	2
   175   00000F                     ??_descomponiendo:
   176                           
   177                           ; 1 bytes @ 0xE
   178   00000F                     	ds	2
   179   000011                     _descomponiendo$852:
   180                           	callstack 0
   181                           
   182                           ; 2 bytes @ 0x10
   183   000011                     	ds	2
   184   000013                     descomponiendo@i:
   185                           	callstack 0
   186                           
   187                           ; 1 bytes @ 0x12
   188   000013                     	ds	1
   189   000014                     _descomponiendo$851:
   190                           	callstack 0
   191                           
   192                           ; 2 bytes @ 0x13
   193   000014                     	ds	2
   194   000016                     descomponiendo@resultado:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x15
   198   000016                     	ds	1
   199   000017                     mostrarDISPLAY@numero:
   200                           	callstack 0
   201                           
   202                           ; 2 bytes @ 0x16
   203   000017                     	ds	2
   204   000019                     ??_mostrarDISPLAY:
   205                           
   206                           ; 1 bytes @ 0x18
   207   000019                     	ds	2
   208   00001B                     contador_up@numero:
   209                           	callstack 0
   210   00001B                     contador_down@numero:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x1A
   214   00001B                     	ds	2
   215   00001D                     ??_contador_up:
   216   00001D                     ??_contador_down:
   217                           
   218                           ; 1 bytes @ 0x1C
   219   00001D                     	ds	4
   220   000021                     main@contador_auto:
   221                           	callstack 0
   222                           
   223                           ; 2 bytes @ 0x20
   224   000021                     	ds	2
   225   000023                     main@selector:
   226                           	callstack 0
   227                           
   228                           ; 1 bytes @ 0x22
   229   000023                     	ds	1
   230   000024                     main@numero:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0x23
   234   000024                     	ds	2
   235                           
   236 ;;
   237 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   238 ;;
   239 ;; *************** function _main *****************
   240 ;; Defined at:
   241 ;;		line 40 in file "main.c"
   242 ;; Parameters:    Size  Location     Type
   243 ;;		None
   244 ;; Auto vars:     Size  Location     Type
   245 ;;  numero          2   35[COMRAM] unsigned short 
   246 ;;  contador_aut    2   32[COMRAM] unsigned short 
   247 ;;  selector        1   34[COMRAM] unsigned char 
   248 ;; Return value:  Size  Location     Type
   249 ;;                  2   40[None  ] int 
   250 ;; Registers used:
   251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   252 ;; Tracked objects:
   253 ;;		On entry : 0/0
   254 ;;		On exit  : 0/0
   255 ;;		Unchanged: 0/0
   256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   257 ;;      Params:         0       0       0       0       0       0       0       0       0
   258 ;;      Locals:         5       0       0       0       0       0       0       0       0
   259 ;;      Temps:          0       0       0       0       0       0       0       0       0
   260 ;;      Totals:         5       0       0       0       0       0       0       0       0
   261 ;;Total ram usage:        5 bytes
   262 ;; Hardware stack levels required when called: 4
   263 ;; This function calls:
   264 ;;		_contador_down
   265 ;;		_contador_up
   266 ;;		_init_osc
   267 ;;		_init_puertos
   268 ;;		_mostrarDISPLAY
   269 ;; This function is called by:
   270 ;;		Startup code after reset
   271 ;; This function uses a non-reentrant model
   272 ;;
   273                           
   274                           	psect	text0
   275   007DC6                     __ptext0:
   276                           	callstack 0
   277   007DC6                     _main:
   278                           	callstack 27
   279   007DC6                     
   280                           ;main.c: 41:     init_osc();
   281   007DC6  EC57  F03D         	call	_init_osc	;wreg free
   282                           
   283                           ;main.c: 42:     init_puertos();
   284   007DCA  EC76  F03D         	call	_init_puertos	;wreg free
   285   007DCE                     
   286                           ;main.c: 43:     uint16_t numero = 0;
   287   007DCE  0E00               	movlw	0
   288   007DD0  6E25               	movwf	(main@numero+1)^0,c
   289   007DD2  0E00               	movlw	0
   290   007DD4  6E24               	movwf	main@numero^0,c
   291   007DD6                     
   292                           ;main.c: 44:     uint8_t selector = 0;
   293   007DD6  0E00               	movlw	0
   294   007DD8  6E23               	movwf	main@selector^0,c
   295   007DDA                     
   296                           ;main.c: 45:     uint16_t contador_auto= 0;
   297   007DDA  0E00               	movlw	0
   298   007DDC  6E22               	movwf	(main@contador_auto+1)^0,c
   299   007DDE  0E00               	movlw	0
   300   007DE0  6E21               	movwf	main@contador_auto^0,c
   301   007DE2                     l1084:
   302                           
   303                           ;main.c: 48:         if(PORTBbits.RB2==0){
   304   007DE2  B481               	btfsc	129,2,c	;volatile
   305   007DE4  EFF6  F03E         	goto	u311
   306   007DE8  EFF8  F03E         	goto	u310
   307   007DEC                     u311:
   308   007DEC  EF0D  F03F         	goto	l42
   309   007DF0                     u310:
   310   007DF0  EF04  F03F         	goto	l1092
   311   007DF4                     l1088:
   312                           
   313                           ;main.c: 50:                 numero = 0;
   314   007DF4  0E00               	movlw	0
   315   007DF6  6E25               	movwf	(main@numero+1)^0,c
   316   007DF8  0E00               	movlw	0
   317   007DFA  6E24               	movwf	main@numero^0,c
   318   007DFC                     
   319                           ;main.c: 51:                 mostrarDISPLAY(0);
   320   007DFC  0E00               	movlw	0
   321   007DFE  6E18               	movwf	(mostrarDISPLAY@numero+1)^0,c
   322   007E00  0E00               	movlw	0
   323   007E02  6E17               	movwf	mostrarDISPLAY@numero^0,c
   324   007E04  EC76  F03E         	call	_mostrarDISPLAY	;wreg free
   325   007E08                     l1092:
   326                           
   327                           ;main.c: 49:            while(PORTBbits.RB2 == 0){
   328   007E08  A481               	btfss	129,2,c	;volatile
   329   007E0A  EF09  F03F         	goto	u321
   330   007E0E  EF0B  F03F         	goto	u320
   331   007E12                     u321:
   332   007E12  EFFA  F03E         	goto	l1088
   333   007E16                     u320:
   334   007E16                     
   335                           ;main.c: 53:             selector = selector +1;
   336   007E16  2823               	incf	main@selector^0,w,c
   337   007E18  6E23               	movwf	main@selector^0,c
   338   007E1A                     l42:
   339                           
   340                           ;main.c: 55:         if(selector == 1){
   341   007E1A  0423               	decf	main@selector^0,w,c
   342   007E1C  A4D8               	btfss	status,2,c
   343   007E1E  EF13  F03F         	goto	u331
   344   007E22  EF15  F03F         	goto	u330
   345   007E26                     u331:
   346   007E26  EF29  F03F         	goto	l1098
   347   007E2A                     u330:
   348   007E2A                     
   349                           ;main.c: 56:                 contador_up(&numero);
   350   007E2A  0E24               	movlw	low main@numero
   351   007E2C  6E1B               	movwf	contador_up@numero^0,c
   352   007E2E  0E00               	movlw	high main@numero
   353   007E30  6E1C               	movwf	(contador_up@numero+1)^0,c
   354   007E32  EC38  F03E         	call	_contador_up	;wreg free
   355                           
   356                           ;main.c: 57:                 contador_down(&numero);
   357   007E36  0E24               	movlw	low main@numero
   358   007E38  6E1B               	movwf	contador_down@numero^0,c
   359   007E3A  0E00               	movlw	high main@numero
   360   007E3C  6E1C               	movwf	(contador_down@numero+1)^0,c
   361   007E3E  ECFA  F03D         	call	_contador_down	;wreg free
   362                           
   363                           ;main.c: 58:                 mostrarDISPLAY(numero);
   364   007E42  C024  F017         	movff	main@numero,mostrarDISPLAY@numero
   365   007E46  C025  F018         	movff	main@numero+1,mostrarDISPLAY@numero+1
   366   007E4A  EC76  F03E         	call	_mostrarDISPLAY	;wreg free
   367                           
   368                           ;main.c: 59:         }else if(selector == 2){
   369   007E4E  EFF1  F03E         	goto	l1084
   370   007E52                     l1098:
   371   007E52  0E02               	movlw	2
   372   007E54  1823               	xorwf	main@selector^0,w,c
   373   007E56  A4D8               	btfss	status,2,c
   374   007E58  EF30  F03F         	goto	u341
   375   007E5C  EF32  F03F         	goto	u340
   376   007E60                     u341:
   377   007E60  EF60  F03F         	goto	l1110
   378   007E64                     u340:
   379   007E64                     
   380                           ;main.c: 61:                 contador_auto = contador_auto + 1;
   381   007E64  0E01               	movlw	1
   382   007E66  2421               	addwf	main@contador_auto^0,w,c
   383   007E68  6E21               	movwf	main@contador_auto^0,c
   384   007E6A  0E00               	movlw	0
   385   007E6C  2022               	addwfc	(main@contador_auto+1)^0,w,c
   386   007E6E  6E22               	movwf	(main@contador_auto+1)^0,c
   387                           
   388                           ;main.c: 62:                 if(contador_auto > 10){
   389   007E70  5022               	movf	(main@contador_auto+1)^0,w,c
   390   007E72  E109               	bnz	u350
   391   007E74  0E0B               	movlw	11
   392   007E76  5C21               	subwf	main@contador_auto^0,w,c
   393   007E78  A0D8               	btfss	status,0,c
   394   007E7A  EF41  F03F         	goto	u351
   395   007E7E  EF43  F03F         	goto	u350
   396   007E82                     u351:
   397   007E82  EF58  F03F         	goto	l1108
   398   007E86                     u350:
   399   007E86                     
   400                           ;main.c: 63:                     if(numero < 9999){
   401   007E86  0E0F               	movlw	15
   402   007E88  5C24               	subwf	main@numero^0,w,c
   403   007E8A  0E27               	movlw	39
   404   007E8C  5825               	subwfb	(main@numero+1)^0,w,c
   405   007E8E  B0D8               	btfsc	status,0,c
   406   007E90  EF4C  F03F         	goto	u361
   407   007E94  EF4E  F03F         	goto	u360
   408   007E98                     u361:
   409   007E98  EF54  F03F         	goto	l1106
   410   007E9C                     u360:
   411   007E9C                     
   412                           ;main.c: 64:                         numero = numero +1;
   413   007E9C  0E01               	movlw	1
   414   007E9E  2424               	addwf	main@numero^0,w,c
   415   007EA0  6E24               	movwf	main@numero^0,c
   416   007EA2  0E00               	movlw	0
   417   007EA4  2025               	addwfc	(main@numero+1)^0,w,c
   418   007EA6  6E25               	movwf	(main@numero+1)^0,c
   419   007EA8                     l1106:
   420                           
   421                           ;main.c: 66:                     contador_auto = 0;
   422   007EA8  0E00               	movlw	0
   423   007EAA  6E22               	movwf	(main@contador_auto+1)^0,c
   424   007EAC  0E00               	movlw	0
   425   007EAE  6E21               	movwf	main@contador_auto^0,c
   426   007EB0                     l1108:
   427                           
   428                           ;main.c: 68:                 mostrarDISPLAY(numero);
   429   007EB0  C024  F017         	movff	main@numero,mostrarDISPLAY@numero
   430   007EB4  C025  F018         	movff	main@numero+1,mostrarDISPLAY@numero+1
   431   007EB8  EC76  F03E         	call	_mostrarDISPLAY	;wreg free
   432                           
   433                           ;main.c: 70:         }else{
   434   007EBC  EFF1  F03E         	goto	l1084
   435   007EC0                     l1110:
   436                           
   437                           ;main.c: 71:             selector = 0;
   438   007EC0  0E00               	movlw	0
   439   007EC2  6E23               	movwf	main@selector^0,c
   440   007EC4  EFF1  F03E         	goto	l1084
   441   007EC8  EF00  F000         	goto	start
   442   007ECC                     __end_of_main:
   443                           	callstack 0
   444                           
   445 ;; *************** function _init_puertos *****************
   446 ;; Defined at:
   447 ;;		line 76 in file "main.c"
   448 ;; Parameters:    Size  Location     Type
   449 ;;		None
   450 ;; Auto vars:     Size  Location     Type
   451 ;;		None
   452 ;; Return value:  Size  Location     Type
   453 ;;                  1    wreg      void 
   454 ;; Registers used:
   455 ;;		wreg, status,2
   456 ;; Tracked objects:
   457 ;;		On entry : 0/0
   458 ;;		On exit  : 0/0
   459 ;;		Unchanged: 0/0
   460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   461 ;;      Params:         0       0       0       0       0       0       0       0       0
   462 ;;      Locals:         0       0       0       0       0       0       0       0       0
   463 ;;      Temps:          0       0       0       0       0       0       0       0       0
   464 ;;      Totals:         0       0       0       0       0       0       0       0       0
   465 ;;Total ram usage:        0 bytes
   466 ;; Hardware stack levels used: 1
   467 ;; This function calls:
   468 ;;		Nothing
   469 ;; This function is called by:
   470 ;;		_main
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474                           	psect	text1
   475   007AEC                     __ptext1:
   476                           	callstack 0
   477   007AEC                     _init_puertos:
   478                           	callstack 30
   479   007AEC                     
   480                           ;main.c: 77:     ANSELD = 0b00000000;
   481   007AEC  0E00               	movlw	0
   482   007AEE  010F               	movlb	15	; () banked
   483   007AF0  6F5E               	movwf	94,b	;volatile
   484                           
   485                           ;main.c: 78:     TRISD = 0b00000000;
   486   007AF2  0E00               	movlw	0
   487   007AF4  6E95               	movwf	149,c	;volatile
   488   007AF6                     
   489                           ; BSR set to: 15
   490                           ;main.c: 79:     LATD = 0b11111111;
   491   007AF6  688C               	setf	140,c	;volatile
   492   007AF8                     
   493                           ; BSR set to: 15
   494                           ;main.c: 81:     ANSELBbits.ANSB0 = 0b0;
   495   007AF8  915C               	bcf	92,0,b	;volatile
   496   007AFA                     
   497                           ; BSR set to: 15
   498                           ;main.c: 82:     TRISBbits.RB0 = 0b1;
   499   007AFA  8093               	bsf	147,0,c	;volatile
   500   007AFC                     
   501                           ; BSR set to: 15
   502                           ;main.c: 84:     ANSELBbits.ANSB1 = 0b0;
   503   007AFC  935C               	bcf	92,1,b	;volatile
   504   007AFE                     
   505                           ; BSR set to: 15
   506                           ;main.c: 85:     TRISBbits.RB1 = 0b1;
   507   007AFE  8293               	bsf	147,1,c	;volatile
   508   007B00                     
   509                           ; BSR set to: 15
   510                           ;main.c: 88:     TRISBbits.RB6 = 0b0;
   511   007B00  9C93               	bcf	147,6,c	;volatile
   512   007B02                     
   513                           ; BSR set to: 15
   514                           ;main.c: 89:     LATB6 = 0b0;
   515   007B02  9C8A               	bcf	3978,6,c	;volatile
   516   007B04                     
   517                           ; BSR set to: 15
   518                           ;main.c: 91:     ANSELBbits.ANSB3 = 0b0;
   519   007B04  975C               	bcf	92,3,b	;volatile
   520   007B06                     
   521                           ; BSR set to: 15
   522                           ;main.c: 92:     TRISBbits.RB3 = 0b0;
   523   007B06  9693               	bcf	147,3,c	;volatile
   524   007B08                     
   525                           ; BSR set to: 15
   526                           ;main.c: 93:      LATB3 = 0b0;
   527   007B08  968A               	bcf	3978,3,c	;volatile
   528   007B0A                     
   529                           ; BSR set to: 15
   530                           ;main.c: 95:      ANSELBbits.ANSB4 = 0b0;
   531   007B0A  995C               	bcf	92,4,b	;volatile
   532   007B0C                     
   533                           ; BSR set to: 15
   534                           ;main.c: 96:     TRISBbits.RB4 = 0b0;
   535   007B0C  9893               	bcf	147,4,c	;volatile
   536   007B0E                     
   537                           ; BSR set to: 15
   538                           ;main.c: 97:     LATB4 = 0b0;
   539   007B0E  988A               	bcf	3978,4,c	;volatile
   540   007B10                     
   541                           ; BSR set to: 15
   542                           ;main.c: 99:      ANSELBbits.ANSB5 = 0b0;
   543   007B10  9B5C               	bcf	92,5,b	;volatile
   544   007B12                     
   545                           ; BSR set to: 15
   546                           ;main.c: 100:     TRISBbits.RB5 = 0b0;
   547   007B12  9A93               	bcf	147,5,c	;volatile
   548   007B14                     
   549                           ; BSR set to: 15
   550                           ;main.c: 101:     LATB5 = 0b0;
   551   007B14  9A8A               	bcf	3978,5,c	;volatile
   552   007B16                     
   553                           ; BSR set to: 15
   554                           ;main.c: 104:     ANSELBbits.ANSB2 = 0b0;
   555   007B16  955C               	bcf	92,2,b	;volatile
   556   007B18                     
   557                           ; BSR set to: 15
   558                           ;main.c: 105:     TRISBbits.RB2 = 0b1;
   559   007B18  8493               	bsf	147,2,c	;volatile
   560   007B1A                     
   561                           ; BSR set to: 15
   562   007B1A  0012               	return		;funcret
   563   007B1C                     __end_of_init_puertos:
   564                           	callstack 0
   565                           
   566 ;; *************** function _init_osc *****************
   567 ;; Defined at:
   568 ;;		line 108 in file "main.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;		None
   571 ;; Auto vars:     Size  Location     Type
   572 ;;		None
   573 ;; Return value:  Size  Location     Type
   574 ;;                  1    wreg      void 
   575 ;; Registers used:
   576 ;;		wreg, status,2
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   582 ;;      Params:         0       0       0       0       0       0       0       0       0
   583 ;;      Locals:         0       0       0       0       0       0       0       0       0
   584 ;;      Temps:          0       0       0       0       0       0       0       0       0
   585 ;;      Totals:         0       0       0       0       0       0       0       0       0
   586 ;;Total ram usage:        0 bytes
   587 ;; Hardware stack levels used: 1
   588 ;; This function calls:
   589 ;;		Nothing
   590 ;; This function is called by:
   591 ;;		_main
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text2
   596   007AAE                     __ptext2:
   597                           	callstack 0
   598   007AAE                     _init_osc:
   599                           	callstack 30
   600   007AAE                     
   601                           ;main.c: 109:     OSCCONbits.IRCF = 0b111;
   602   007AAE  0E70               	movlw	112
   603   007AB0  12D3               	iorwf	211,f,c	;volatile
   604                           
   605                           ;main.c: 110:     OSCCONbits.SCS = 0b11;
   606   007AB2  0E03               	movlw	3
   607   007AB4  12D3               	iorwf	211,f,c	;volatile
   608   007AB6  0012               	return		;funcret
   609   007AB8                     __end_of_init_osc:
   610                           	callstack 0
   611                           
   612 ;; *************** function _contador_up *****************
   613 ;; Defined at:
   614 ;;		line 112 in file "main.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;  numero          2   26[COMRAM] PTR unsigned short 
   617 ;;		 -> main@numero(2), 
   618 ;; Auto vars:     Size  Location     Type
   619 ;;		None
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      void 
   622 ;; Registers used:
   623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   629 ;;      Params:         2       0       0       0       0       0       0       0       0
   630 ;;      Locals:         0       0       0       0       0       0       0       0       0
   631 ;;      Temps:          2       0       0       0       0       0       0       0       0
   632 ;;      Totals:         4       0       0       0       0       0       0       0       0
   633 ;;Total ram usage:        4 bytes
   634 ;; Hardware stack levels used: 1
   635 ;; Hardware stack levels required when called: 3
   636 ;; This function calls:
   637 ;;		_mostrarDISPLAY
   638 ;; This function is called by:
   639 ;;		_main
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           	psect	text3
   644   007C70                     __ptext3:
   645                           	callstack 0
   646   007C70                     _contador_up:
   647                           	callstack 27
   648   007C70                     
   649                           ;main.c: 114:     if(PORTBbits.RB0 == 0){
   650   007C70  B081               	btfsc	129,0,c	;volatile
   651   007C72  EF3D  F03E         	goto	u251
   652   007C76  EF3F  F03E         	goto	u250
   653   007C7A                     u251:
   654   007C7A  EF75  F03E         	goto	l68
   655   007C7E                     u250:
   656   007C7E                     
   657                           ;main.c: 115:         if(*numero<9999){
   658   007C7E  C01B  FFD9         	movff	contador_up@numero,fsr2l
   659   007C82  C01C  FFDA         	movff	contador_up@numero+1,fsr2h
   660   007C86  0E0F               	movlw	15
   661   007C88  5CDE               	subwf	postinc2,w,c
   662   007C8A  0E27               	movlw	39
   663   007C8C  58DE               	subwfb	postinc2,w,c
   664   007C8E  B0D8               	btfsc	status,0,c
   665   007C90  EF4C  F03E         	goto	u261
   666   007C94  EF4E  F03E         	goto	u260
   667   007C98                     u261:
   668   007C98  EF75  F03E         	goto	l68
   669   007C9C                     u260:
   670   007C9C                     
   671                           ;main.c: 116:             *numero = *numero + 1;
   672   007C9C  C01B  FFD9         	movff	contador_up@numero,fsr2l
   673   007CA0  C01C  FFDA         	movff	contador_up@numero+1,fsr2h
   674   007CA4  CFDE F01D          	movff	postinc2,??_contador_up
   675   007CA8  CFDD F01E          	movff	postdec2,??_contador_up+1
   676   007CAC  0E01               	movlw	1
   677   007CAE  261D               	addwf	??_contador_up^0,f,c
   678   007CB0  0E00               	movlw	0
   679   007CB2  221E               	addwfc	(??_contador_up+1)^0,f,c
   680   007CB4  C01B  FFD9         	movff	contador_up@numero,fsr2l
   681   007CB8  C01C  FFDA         	movff	contador_up@numero+1,fsr2h
   682   007CBC  C01D  FFDE         	movff	??_contador_up,postinc2
   683   007CC0  C01E  FFDD         	movff	??_contador_up+1,postdec2
   684                           
   685                           ;main.c: 117:             while(PORTBbits.RB0 == 0){
   686   007CC4  EF6E  F03E         	goto	l1064
   687   007CC8                     l1062:
   688                           
   689                           ;main.c: 118:                 mostrarDISPLAY(*numero);
   690   007CC8  C01B  FFD9         	movff	contador_up@numero,fsr2l
   691   007CCC  C01C  FFDA         	movff	contador_up@numero+1,fsr2h
   692   007CD0  CFDE F017          	movff	postinc2,mostrarDISPLAY@numero
   693   007CD4  CFDD F018          	movff	postdec2,mostrarDISPLAY@numero+1
   694   007CD8  EC76  F03E         	call	_mostrarDISPLAY	;wreg free
   695   007CDC                     l1064:
   696                           
   697                           ;main.c: 117:             while(PORTBbits.RB0 == 0){
   698   007CDC  A081               	btfss	129,0,c	;volatile
   699   007CDE  EF73  F03E         	goto	u271
   700   007CE2  EF75  F03E         	goto	u270
   701   007CE6                     u271:
   702   007CE6  EF64  F03E         	goto	l1062
   703   007CEA                     u270:
   704   007CEA                     l68:
   705   007CEA  0012               	return		;funcret
   706   007CEC                     __end_of_contador_up:
   707                           	callstack 0
   708                           
   709 ;; *************** function _contador_down *****************
   710 ;; Defined at:
   711 ;;		line 123 in file "main.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  numero          2   26[COMRAM] PTR unsigned short 
   714 ;;		 -> main@numero(2), 
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   726 ;;      Params:         2       0       0       0       0       0       0       0       0
   727 ;;      Locals:         0       0       0       0       0       0       0       0       0
   728 ;;      Temps:          4       0       0       0       0       0       0       0       0
   729 ;;      Totals:         6       0       0       0       0       0       0       0       0
   730 ;;Total ram usage:        6 bytes
   731 ;; Hardware stack levels used: 1
   732 ;; Hardware stack levels required when called: 3
   733 ;; This function calls:
   734 ;;		_mostrarDISPLAY
   735 ;; This function is called by:
   736 ;;		_main
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740                           	psect	text4
   741   007BF4                     __ptext4:
   742                           	callstack 0
   743   007BF4                     _contador_down:
   744                           	callstack 27
   745   007BF4                     
   746                           ;main.c: 125:     if(PORTBbits.RB1 == 0){
   747   007BF4  B281               	btfsc	129,1,c	;volatile
   748   007BF6  EFFF  F03D         	goto	u281
   749   007BFA  EF01  F03E         	goto	u280
   750   007BFE                     u281:
   751   007BFE  EF37  F03E         	goto	l76
   752   007C02                     u280:
   753   007C02                     
   754                           ;main.c: 126:         if(*numero>=1){
   755   007C02  C01B  FFD9         	movff	contador_down@numero,fsr2l
   756   007C06  C01C  FFDA         	movff	contador_down@numero+1,fsr2h
   757   007C0A  50DE               	movf	postinc2,w,c
   758   007C0C  10DE               	iorwf	postinc2,w,c
   759   007C0E  B4D8               	btfsc	status,2,c
   760   007C10  EF0C  F03E         	goto	u291
   761   007C14  EF0E  F03E         	goto	u290
   762   007C18                     u291:
   763   007C18  EF37  F03E         	goto	l76
   764   007C1C                     u290:
   765   007C1C                     
   766                           ;main.c: 127:             *numero = *numero - 1;
   767   007C1C  C01B  FFD9         	movff	contador_down@numero,fsr2l
   768   007C20  C01C  FFDA         	movff	contador_down@numero+1,fsr2h
   769   007C24  CFDE F01D          	movff	postinc2,??_contador_down
   770   007C28  CFDD F01E          	movff	postdec2,??_contador_down+1
   771   007C2C  0EFF               	movlw	255
   772   007C2E  241D               	addwf	??_contador_down^0,w,c
   773   007C30  6E1F               	movwf	(??_contador_down+2)^0,c
   774   007C32  0EFF               	movlw	255
   775   007C34  201E               	addwfc	(??_contador_down+1)^0,w,c
   776   007C36  6E20               	movwf	(??_contador_down+3)^0,c
   777   007C38  C01B  FFD9         	movff	contador_down@numero,fsr2l
   778   007C3C  C01C  FFDA         	movff	contador_down@numero+1,fsr2h
   779   007C40  C01F  FFDE         	movff	??_contador_down+2,postinc2
   780   007C44  C020  FFDD         	movff	??_contador_down+3,postdec2
   781                           
   782                           ;main.c: 128:             while(PORTBbits.RB1 == 0){
   783   007C48  EF30  F03E         	goto	l1074
   784   007C4C                     l1072:
   785                           
   786                           ;main.c: 129:                 mostrarDISPLAY(*numero);
   787   007C4C  C01B  FFD9         	movff	contador_down@numero,fsr2l
   788   007C50  C01C  FFDA         	movff	contador_down@numero+1,fsr2h
   789   007C54  CFDE F017          	movff	postinc2,mostrarDISPLAY@numero
   790   007C58  CFDD F018          	movff	postdec2,mostrarDISPLAY@numero+1
   791   007C5C  EC76  F03E         	call	_mostrarDISPLAY	;wreg free
   792   007C60                     l1074:
   793                           
   794                           ;main.c: 128:             while(PORTBbits.RB1 == 0){
   795   007C60  A281               	btfss	129,1,c	;volatile
   796   007C62  EF35  F03E         	goto	u301
   797   007C66  EF37  F03E         	goto	u300
   798   007C6A                     u301:
   799   007C6A  EF26  F03E         	goto	l1072
   800   007C6E                     u300:
   801   007C6E                     l76:
   802   007C6E  0012               	return		;funcret
   803   007C70                     __end_of_contador_down:
   804                           	callstack 0
   805                           
   806 ;; *************** function _mostrarDISPLAY *****************
   807 ;; Defined at:
   808 ;;		line 152 in file "main.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  numero          2   22[COMRAM] unsigned short 
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   822 ;;      Params:         2       0       0       0       0       0       0       0       0
   823 ;;      Locals:         0       0       0       0       0       0       0       0       0
   824 ;;      Temps:          2       0       0       0       0       0       0       0       0
   825 ;;      Totals:         4       0       0       0       0       0       0       0       0
   826 ;;Total ram usage:        4 bytes
   827 ;; Hardware stack levels used: 1
   828 ;; Hardware stack levels required when called: 2
   829 ;; This function calls:
   830 ;;		_descomponiendo
   831 ;; This function is called by:
   832 ;;		_main
   833 ;;		_contador_up
   834 ;;		_contador_down
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           	psect	text5
   839   007CEC                     __ptext5:
   840                           	callstack 0
   841   007CEC                     _mostrarDISPLAY:
   842                           	callstack 28
   843   007CEC                     
   844                           ;main.c: 153:         LATD = display[descomponiendo('m',numero)];
   845   007CEC  C017  F00D         	movff	mostrarDISPLAY@numero,descomponiendo@numero
   846   007CF0  C018  F00E         	movff	mostrarDISPLAY@numero+1,descomponiendo@numero+1
   847   007CF4  0E6D               	movlw	109
   848   007CF6  EC66  F03F         	call	_descomponiendo
   849   007CFA  6E19               	movwf	??_mostrarDISPLAY^0,c
   850   007CFC  6A1A               	clrf	(??_mostrarDISPLAY+1)^0,c
   851   007CFE  0E26               	movlw	low _display
   852   007D00  2419               	addwf	??_mostrarDISPLAY^0,w,c
   853   007D02  6ED9               	movwf	fsr2l,c
   854   007D04  0E00               	movlw	high _display
   855   007D06  201A               	addwfc	(??_mostrarDISPLAY+1)^0,w,c
   856   007D08  6EDA               	movwf	fsr2h,c
   857   007D0A  50DF               	movf	indf2,w,c
   858   007D0C  6E8C               	movwf	140,c	;volatile
   859   007D0E                     
   860                           ;main.c: 154:         LATB6 = 0b1;
   861   007D0E  8C8A               	bsf	3978,6,c	;volatile
   862   007D10                     
   863                           ;main.c: 155:         _delay((unsigned long)((2)*(16000000UL/4000.0)));
   864   007D10  0E0B               	movlw	11
   865   007D12  6E19               	movwf	??_mostrarDISPLAY^0,c
   866   007D14  0E62               	movlw	98
   867   007D16                     u377:
   868   007D16  2EE8               	decfsz	wreg,f,c
   869   007D18  D7FE               	bra	u377
   870   007D1A  2E19               	decfsz	??_mostrarDISPLAY^0,f,c
   871   007D1C  D7FC               	bra	u377
   872   007D1E  D000               	nop2	
   873   007D20                     
   874                           ;main.c: 156:         LATB6 = 0b0;
   875   007D20  9C8A               	bcf	3978,6,c	;volatile
   876   007D22                     
   877                           ;main.c: 158:         LATD = display[descomponiendo('c',numero)];
   878   007D22  C017  F00D         	movff	mostrarDISPLAY@numero,descomponiendo@numero
   879   007D26  C018  F00E         	movff	mostrarDISPLAY@numero+1,descomponiendo@numero+1
   880   007D2A  0E63               	movlw	99
   881   007D2C  EC66  F03F         	call	_descomponiendo
   882   007D30  6E19               	movwf	??_mostrarDISPLAY^0,c
   883   007D32  6A1A               	clrf	(??_mostrarDISPLAY+1)^0,c
   884   007D34  0E26               	movlw	low _display
   885   007D36  2419               	addwf	??_mostrarDISPLAY^0,w,c
   886   007D38  6ED9               	movwf	fsr2l,c
   887   007D3A  0E00               	movlw	high _display
   888   007D3C  201A               	addwfc	(??_mostrarDISPLAY+1)^0,w,c
   889   007D3E  6EDA               	movwf	fsr2h,c
   890   007D40  50DF               	movf	indf2,w,c
   891   007D42  6E8C               	movwf	140,c	;volatile
   892   007D44                     
   893                           ;main.c: 159:         LATB3 = 0b1;
   894   007D44  868A               	bsf	3978,3,c	;volatile
   895                           
   896                           ;main.c: 160:         _delay((unsigned long)((2)*(16000000UL/4000.0)));
   897   007D46  0E0B               	movlw	11
   898   007D48  6E19               	movwf	??_mostrarDISPLAY^0,c
   899   007D4A  0E62               	movlw	98
   900   007D4C                     u387:
   901   007D4C  2EE8               	decfsz	wreg,f,c
   902   007D4E  D7FE               	bra	u387
   903   007D50  2E19               	decfsz	??_mostrarDISPLAY^0,f,c
   904   007D52  D7FC               	bra	u387
   905   007D54  D000               	nop2	
   906   007D56                     
   907                           ;main.c: 161:         LATB3 = 0b0;
   908   007D56  968A               	bcf	3978,3,c	;volatile
   909   007D58                     
   910                           ;main.c: 163:         LATD = display[descomponiendo('d',numero)];
   911   007D58  C017  F00D         	movff	mostrarDISPLAY@numero,descomponiendo@numero
   912   007D5C  C018  F00E         	movff	mostrarDISPLAY@numero+1,descomponiendo@numero+1
   913   007D60  0E64               	movlw	100
   914   007D62  EC66  F03F         	call	_descomponiendo
   915   007D66  6E19               	movwf	??_mostrarDISPLAY^0,c
   916   007D68  6A1A               	clrf	(??_mostrarDISPLAY+1)^0,c
   917   007D6A  0E26               	movlw	low _display
   918   007D6C  2419               	addwf	??_mostrarDISPLAY^0,w,c
   919   007D6E  6ED9               	movwf	fsr2l,c
   920   007D70  0E00               	movlw	high _display
   921   007D72  201A               	addwfc	(??_mostrarDISPLAY+1)^0,w,c
   922   007D74  6EDA               	movwf	fsr2h,c
   923   007D76  50DF               	movf	indf2,w,c
   924   007D78  6E8C               	movwf	140,c	;volatile
   925   007D7A                     
   926                           ;main.c: 164:         LATB4 = 0b1;
   927   007D7A  888A               	bsf	3978,4,c	;volatile
   928   007D7C                     
   929                           ;main.c: 165:         _delay((unsigned long)((2)*(16000000UL/4000.0)));
   930   007D7C  0E0B               	movlw	11
   931   007D7E  6E19               	movwf	??_mostrarDISPLAY^0,c
   932   007D80  0E62               	movlw	98
   933   007D82                     u397:
   934   007D82  2EE8               	decfsz	wreg,f,c
   935   007D84  D7FE               	bra	u397
   936   007D86  2E19               	decfsz	??_mostrarDISPLAY^0,f,c
   937   007D88  D7FC               	bra	u397
   938   007D8A  D000               	nop2	
   939   007D8C                     
   940                           ;main.c: 166:         LATB4 = 0b0;
   941   007D8C  988A               	bcf	3978,4,c	;volatile
   942                           
   943                           ;main.c: 168:         LATD = display[descomponiendo('u',numero)];
   944   007D8E  C017  F00D         	movff	mostrarDISPLAY@numero,descomponiendo@numero
   945   007D92  C018  F00E         	movff	mostrarDISPLAY@numero+1,descomponiendo@numero+1
   946   007D96  0E75               	movlw	117
   947   007D98  EC66  F03F         	call	_descomponiendo
   948   007D9C  6E19               	movwf	??_mostrarDISPLAY^0,c
   949   007D9E  6A1A               	clrf	(??_mostrarDISPLAY+1)^0,c
   950   007DA0  0E26               	movlw	low _display
   951   007DA2  2419               	addwf	??_mostrarDISPLAY^0,w,c
   952   007DA4  6ED9               	movwf	fsr2l,c
   953   007DA6  0E00               	movlw	high _display
   954   007DA8  201A               	addwfc	(??_mostrarDISPLAY+1)^0,w,c
   955   007DAA  6EDA               	movwf	fsr2h,c
   956   007DAC  50DF               	movf	indf2,w,c
   957   007DAE  6E8C               	movwf	140,c	;volatile
   958   007DB0                     
   959                           ;main.c: 169:          LATB5 = 0b1;
   960   007DB0  8A8A               	bsf	3978,5,c	;volatile
   961   007DB2                     
   962                           ;main.c: 170:         _delay((unsigned long)((2)*(16000000UL/4000.0)));
   963   007DB2  0E0B               	movlw	11
   964   007DB4  6E19               	movwf	??_mostrarDISPLAY^0,c
   965   007DB6  0E62               	movlw	98
   966   007DB8                     u407:
   967   007DB8  2EE8               	decfsz	wreg,f,c
   968   007DBA  D7FE               	bra	u407
   969   007DBC  2E19               	decfsz	??_mostrarDISPLAY^0,f,c
   970   007DBE  D7FC               	bra	u407
   971   007DC0  D000               	nop2	
   972   007DC2                     
   973                           ;main.c: 171:         LATB5= 0b0;
   974   007DC2  9A8A               	bcf	3978,5,c	;volatile
   975   007DC4  0012               	return		;funcret
   976   007DC6                     __end_of_mostrarDISPLAY:
   977                           	callstack 0
   978                           
   979 ;; *************** function _descomponiendo *****************
   980 ;; Defined at:
   981 ;;		line 134 in file "main.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;  i               1    wreg     unsigned char 
   984 ;;  numero          2   12[COMRAM] unsigned short 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  i               1   18[COMRAM] unsigned char 
   987 ;;  resultado       1   21[COMRAM] unsigned char 
   988 ;; Return value:  Size  Location     Type
   989 ;;                  1    wreg      unsigned char 
   990 ;; Registers used:
   991 ;;		wreg, status,2, status,0, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   997 ;;      Params:         2       0       0       0       0       0       0       0       0
   998 ;;      Locals:         6       0       0       0       0       0       0       0       0
   999 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1000 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1001 ;;Total ram usage:       10 bytes
  1002 ;; Hardware stack levels used: 1
  1003 ;; Hardware stack levels required when called: 1
  1004 ;; This function calls:
  1005 ;;		___lwdiv
  1006 ;;		___lwmod
  1007 ;; This function is called by:
  1008 ;;		_mostrarDISPLAY
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           	psect	text6
  1013   007ECC                     __ptext6:
  1014                           	callstack 0
  1015   007ECC                     _descomponiendo:
  1016                           	callstack 28
  1017                           
  1018                           ;incstack = 0
  1019                           ;descomponiendo@i stored from wreg
  1020   007ECC  6E13               	movwf	descomponiendo@i^0,c
  1021   007ECE                     
  1022                           ;main.c: 135:     uint8_t resultado = 0;
  1023   007ECE  0E00               	movlw	0
  1024   007ED0  6E16               	movwf	descomponiendo@resultado^0,c
  1025                           
  1026                           ;main.c: 136:     switch(i){
  1027   007ED2  EFE1  F03F         	goto	l1018
  1028   007ED6                     l1008:
  1029                           
  1030                           ;main.c: 138:             resultado = (uint8_t) (numero / 1000);
  1031   007ED6  C00D  F006         	movff	descomponiendo@numero,___lwdiv@dividend
  1032   007EDA  C00E  F007         	movff	descomponiendo@numero+1,___lwdiv@dividend+1
  1033   007EDE  0E03               	movlw	3
  1034   007EE0  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1035   007EE2  0EE8               	movlw	232
  1036   007EE4  6E08               	movwf	___lwdiv@divisor^0,c
  1037   007EE6  ECC0  F03D         	call	___lwdiv	;wreg free
  1038   007EEA  5006               	movf	?___lwdiv^0,w,c
  1039   007EEC  6E16               	movwf	descomponiendo@resultado^0,c
  1040                           
  1041                           ;main.c: 139:             break;
  1042   007EEE  EFFE  F03F         	goto	l1020
  1043   007EF2                     l1010:
  1044                           
  1045                           ;main.c: 141:              resultado = (uint8_t) ((numero % 1000) / 100);
  1046   007EF2  0E03               	movlw	3
  1047   007EF4  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1048   007EF6  0EE8               	movlw	232
  1049   007EF8  6E03               	movwf	___lwmod@divisor^0,c
  1050   007EFA  C00D  F001         	movff	descomponiendo@numero,___lwmod@dividend
  1051   007EFE  C00E  F002         	movff	descomponiendo@numero+1,___lwmod@dividend+1
  1052   007F02  EC8E  F03D         	call	___lwmod	;wreg free
  1053   007F06  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1054   007F0A  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1055   007F0E  0E00               	movlw	0
  1056   007F10  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1057   007F12  0E64               	movlw	100
  1058   007F14  6E08               	movwf	___lwdiv@divisor^0,c
  1059   007F16  ECC0  F03D         	call	___lwdiv	;wreg free
  1060   007F1A  5006               	movf	?___lwdiv^0,w,c
  1061   007F1C  6E16               	movwf	descomponiendo@resultado^0,c
  1062                           
  1063                           ;main.c: 142:             break;
  1064   007F1E  EFFE  F03F         	goto	l1020
  1065   007F22                     l1012:
  1066                           
  1067                           ;main.c: 144:             resultado = (uint8_t) (((numero % 1000) % 100) / 10);
  1068   007F22  0E03               	movlw	3
  1069   007F24  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1070   007F26  0EE8               	movlw	232
  1071   007F28  6E03               	movwf	___lwmod@divisor^0,c
  1072   007F2A  C00D  F001         	movff	descomponiendo@numero,___lwmod@dividend
  1073   007F2E  C00E  F002         	movff	descomponiendo@numero+1,___lwmod@dividend+1
  1074   007F32  EC8E  F03D         	call	___lwmod	;wreg free
  1075   007F36  C001  F014         	movff	?___lwmod,_descomponiendo$851
  1076   007F3A  C002  F015         	movff	?___lwmod+1,_descomponiendo$851+1
  1077                           
  1078                           ;main.c: 144:             resultado = (uint8_t) (((numero % 1000) % 100) / 10);
  1079   007F3E  0E00               	movlw	0
  1080   007F40  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1081   007F42  0E64               	movlw	100
  1082   007F44  6E03               	movwf	___lwmod@divisor^0,c
  1083   007F46  C014  F001         	movff	_descomponiendo$851,___lwmod@dividend
  1084   007F4A  C015  F002         	movff	_descomponiendo$851+1,___lwmod@dividend+1
  1085   007F4E  EC8E  F03D         	call	___lwmod	;wreg free
  1086   007F52  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1087   007F56  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1088   007F5A  0E00               	movlw	0
  1089   007F5C  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1090   007F5E  0E0A               	movlw	10
  1091   007F60  6E08               	movwf	___lwdiv@divisor^0,c
  1092   007F62  ECC0  F03D         	call	___lwdiv	;wreg free
  1093   007F66  5006               	movf	?___lwdiv^0,w,c
  1094   007F68  6E16               	movwf	descomponiendo@resultado^0,c
  1095                           
  1096                           ;main.c: 145:             break;
  1097   007F6A  EFFE  F03F         	goto	l1020
  1098   007F6E                     l1014:
  1099                           
  1100                           ;main.c: 147:             resultado = (uint8_t) (((numero % 1000) % 100) % 10);
  1101   007F6E  0E03               	movlw	3
  1102   007F70  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1103   007F72  0EE8               	movlw	232
  1104   007F74  6E03               	movwf	___lwmod@divisor^0,c
  1105   007F76  C00D  F001         	movff	descomponiendo@numero,___lwmod@dividend
  1106   007F7A  C00E  F002         	movff	descomponiendo@numero+1,___lwmod@dividend+1
  1107   007F7E  EC8E  F03D         	call	___lwmod	;wreg free
  1108   007F82  C001  F014         	movff	?___lwmod,_descomponiendo$851
  1109   007F86  C002  F015         	movff	?___lwmod+1,_descomponiendo$851+1
  1110                           
  1111                           ;main.c: 147:             resultado = (uint8_t) (((numero % 1000) % 100) % 10);
  1112   007F8A  0E00               	movlw	0
  1113   007F8C  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1114   007F8E  0E64               	movlw	100
  1115   007F90  6E03               	movwf	___lwmod@divisor^0,c
  1116   007F92  C014  F001         	movff	_descomponiendo$851,___lwmod@dividend
  1117   007F96  C015  F002         	movff	_descomponiendo$851+1,___lwmod@dividend+1
  1118   007F9A  EC8E  F03D         	call	___lwmod	;wreg free
  1119   007F9E  C001  F011         	movff	?___lwmod,_descomponiendo$852
  1120   007FA2  C002  F012         	movff	?___lwmod+1,_descomponiendo$852+1
  1121                           
  1122                           ;main.c: 147:             resultado = (uint8_t) (((numero % 1000) % 100) % 10);
  1123   007FA6  C011  F001         	movff	_descomponiendo$852,___lwmod@dividend
  1124   007FAA  C012  F002         	movff	_descomponiendo$852+1,___lwmod@dividend+1
  1125   007FAE  0E00               	movlw	0
  1126   007FB0  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1127   007FB2  0E0A               	movlw	10
  1128   007FB4  6E03               	movwf	___lwmod@divisor^0,c
  1129   007FB6  EC8E  F03D         	call	___lwmod	;wreg free
  1130   007FBA  5001               	movf	?___lwmod^0,w,c
  1131   007FBC  6E16               	movwf	descomponiendo@resultado^0,c
  1132                           
  1133                           ;main.c: 148:             break;
  1134   007FBE  EFFE  F03F         	goto	l1020
  1135   007FC2                     l1018:
  1136   007FC2  5013               	movf	descomponiendo@i^0,w,c
  1137   007FC4  6E0F               	movwf	??_descomponiendo^0,c
  1138   007FC6  6A10               	clrf	(??_descomponiendo+1)^0,c
  1139                           
  1140                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1141                           ; Switch size 1, requested type "simple"
  1142                           ; Number of cases is 1, Range of values is 0 to 0
  1143                           ; switch strategies available:
  1144                           ; Name         Instructions Cycles
  1145                           ; simple_byte            4     3 (average)
  1146                           ;	Chosen strategy is simple_byte
  1147   007FC8  5010               	movf	(??_descomponiendo+1)^0,w,c
  1148   007FCA  0A00               	xorlw	0	; case 0
  1149   007FCC  B4D8               	btfsc	status,2,c
  1150   007FCE  EFEB  F03F         	goto	l1132
  1151   007FD2  EFFE  F03F         	goto	l1020
  1152   007FD6                     l1132:
  1153                           
  1154                           ; Switch size 1, requested type "simple"
  1155                           ; Number of cases is 4, Range of values is 99 to 117
  1156                           ; switch strategies available:
  1157                           ; Name         Instructions Cycles
  1158                           ; simple_byte           13     7 (average)
  1159                           ;	Chosen strategy is simple_byte
  1160   007FD6  500F               	movf	??_descomponiendo^0,w,c
  1161   007FD8  0A63               	xorlw	99	; case 99
  1162   007FDA  B4D8               	btfsc	status,2,c
  1163   007FDC  EF79  F03F         	goto	l1010
  1164   007FE0  0A07               	xorlw	7	; case 100
  1165   007FE2  B4D8               	btfsc	status,2,c
  1166   007FE4  EF91  F03F         	goto	l1012
  1167   007FE8  0A09               	xorlw	9	; case 109
  1168   007FEA  B4D8               	btfsc	status,2,c
  1169   007FEC  EF6B  F03F         	goto	l1008
  1170   007FF0  0A18               	xorlw	24	; case 117
  1171   007FF2  B4D8               	btfsc	status,2,c
  1172   007FF4  EFB7  F03F         	goto	l1014
  1173   007FF8  EFFE  F03F         	goto	l1020
  1174   007FFC                     l1020:
  1175                           
  1176                           ;main.c: 150:     return resultado;
  1177   007FFC  5016               	movf	descomponiendo@resultado^0,w,c
  1178   007FFE  0012               	return		;funcret
  1179   008000                     __end_of_descomponiendo:
  1180                           	callstack 0
  1181                           
  1182 ;; *************** function ___lwmod *****************
  1183 ;; Defined at:
  1184 ;;		line 7 in file "/Applications/microchip/xc8/v2.40/pic/sources/c99/common/lwmod.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  dividend        2    0[COMRAM] unsigned int 
  1187 ;;  divisor         2    2[COMRAM] unsigned int 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;  counter         1    4[COMRAM] unsigned char 
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  2    0[COMRAM] unsigned int 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2, status,0
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1199 ;;      Params:         4       0       0       0       0       0       0       0       0
  1200 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1202 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1203 ;;Total ram usage:        5 bytes
  1204 ;; Hardware stack levels used: 1
  1205 ;; This function calls:
  1206 ;;		Nothing
  1207 ;; This function is called by:
  1208 ;;		_descomponiendo
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           	psect	text7
  1213   007B1C                     __ptext7:
  1214                           	callstack 0
  1215   007B1C                     ___lwmod:
  1216                           	callstack 28
  1217   007B1C  5003               	movf	___lwmod@divisor^0,w,c
  1218   007B1E  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  1219   007B20  B4D8               	btfsc	status,2,c
  1220   007B22  EF95  F03D         	goto	u221
  1221   007B26  EF97  F03D         	goto	u220
  1222   007B2A                     u221:
  1223   007B2A  EFBB  F03D         	goto	l592
  1224   007B2E                     u220:
  1225   007B2E  0E01               	movlw	1
  1226   007B30  6E05               	movwf	___lwmod@counter^0,c
  1227   007B32  EF9F  F03D         	goto	l996
  1228   007B36                     l994:
  1229   007B36  90D8               	bcf	status,0,c
  1230   007B38  3603               	rlcf	___lwmod@divisor^0,f,c
  1231   007B3A  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  1232   007B3C  2A05               	incf	___lwmod@counter^0,f,c
  1233   007B3E                     l996:
  1234   007B3E  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  1235   007B40  EFA4  F03D         	goto	u231
  1236   007B44  EFA6  F03D         	goto	u230
  1237   007B48                     u231:
  1238   007B48  EF9B  F03D         	goto	l994
  1239   007B4C                     u230:
  1240   007B4C                     l998:
  1241   007B4C  5003               	movf	___lwmod@divisor^0,w,c
  1242   007B4E  5C01               	subwf	___lwmod@dividend^0,w,c
  1243   007B50  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1244   007B52  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  1245   007B54  A0D8               	btfss	status,0,c
  1246   007B56  EFAF  F03D         	goto	u241
  1247   007B5A  EFB1  F03D         	goto	u240
  1248   007B5E                     u241:
  1249   007B5E  EFB5  F03D         	goto	l1002
  1250   007B62                     u240:
  1251   007B62  5003               	movf	___lwmod@divisor^0,w,c
  1252   007B64  5E01               	subwf	___lwmod@dividend^0,f,c
  1253   007B66  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1254   007B68  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  1255   007B6A                     l1002:
  1256   007B6A  90D8               	bcf	status,0,c
  1257   007B6C  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  1258   007B6E  3203               	rrcf	___lwmod@divisor^0,f,c
  1259   007B70  2E05               	decfsz	___lwmod@counter^0,f,c
  1260   007B72  EFA6  F03D         	goto	l998
  1261   007B76                     l592:
  1262   007B76  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1263   007B7A  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1264   007B7E  0012               	return		;funcret
  1265   007B80                     __end_of___lwmod:
  1266                           	callstack 0
  1267                           
  1268 ;; *************** function ___lwdiv *****************
  1269 ;; Defined at:
  1270 ;;		line 7 in file "/Applications/microchip/xc8/v2.40/pic/sources/c99/common/lwdiv.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;  dividend        2    5[COMRAM] unsigned int 
  1273 ;;  divisor         2    7[COMRAM] unsigned int 
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  quotient        2    9[COMRAM] unsigned int 
  1276 ;;  counter         1   11[COMRAM] unsigned char 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  2    5[COMRAM] unsigned int 
  1279 ;; Registers used:
  1280 ;;		wreg, status,2, status,0
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1286 ;;      Params:         4       0       0       0       0       0       0       0       0
  1287 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1288 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1289 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1290 ;;Total ram usage:        7 bytes
  1291 ;; Hardware stack levels used: 1
  1292 ;; This function calls:
  1293 ;;		Nothing
  1294 ;; This function is called by:
  1295 ;;		_descomponiendo
  1296 ;; This function uses a non-reentrant model
  1297 ;;
  1298                           
  1299                           	psect	text8
  1300   007B80                     __ptext8:
  1301                           	callstack 0
  1302   007B80                     ___lwdiv:
  1303                           	callstack 28
  1304   007B80  0E00               	movlw	0
  1305   007B82  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
  1306   007B84  0E00               	movlw	0
  1307   007B86  6E0A               	movwf	___lwdiv@quotient^0,c
  1308   007B88  5008               	movf	___lwdiv@divisor^0,w,c
  1309   007B8A  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1310   007B8C  B4D8               	btfsc	status,2,c
  1311   007B8E  EFCB  F03D         	goto	u191
  1312   007B92  EFCD  F03D         	goto	u190
  1313   007B96                     u191:
  1314   007B96  EFF5  F03D         	goto	l582
  1315   007B9A                     u190:
  1316   007B9A  0E01               	movlw	1
  1317   007B9C  6E0C               	movwf	___lwdiv@counter^0,c
  1318   007B9E  EFD5  F03D         	goto	l976
  1319   007BA2                     l974:
  1320   007BA2  90D8               	bcf	status,0,c
  1321   007BA4  3608               	rlcf	___lwdiv@divisor^0,f,c
  1322   007BA6  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1323   007BA8  2A0C               	incf	___lwdiv@counter^0,f,c
  1324   007BAA                     l976:
  1325   007BAA  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
  1326   007BAC  EFDA  F03D         	goto	u201
  1327   007BB0  EFDC  F03D         	goto	u200
  1328   007BB4                     u201:
  1329   007BB4  EFD1  F03D         	goto	l974
  1330   007BB8                     u200:
  1331   007BB8                     l978:
  1332   007BB8  90D8               	bcf	status,0,c
  1333   007BBA  360A               	rlcf	___lwdiv@quotient^0,f,c
  1334   007BBC  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1335   007BBE  5008               	movf	___lwdiv@divisor^0,w,c
  1336   007BC0  5C06               	subwf	___lwdiv@dividend^0,w,c
  1337   007BC2  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1338   007BC4  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1339   007BC6  A0D8               	btfss	status,0,c
  1340   007BC8  EFE8  F03D         	goto	u211
  1341   007BCC  EFEA  F03D         	goto	u210
  1342   007BD0                     u211:
  1343   007BD0  EFEF  F03D         	goto	l986
  1344   007BD4                     u210:
  1345   007BD4  5008               	movf	___lwdiv@divisor^0,w,c
  1346   007BD6  5E06               	subwf	___lwdiv@dividend^0,f,c
  1347   007BD8  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1348   007BDA  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1349   007BDC  800A               	bsf	___lwdiv@quotient^0,0,c
  1350   007BDE                     l986:
  1351   007BDE  90D8               	bcf	status,0,c
  1352   007BE0  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1353   007BE2  3208               	rrcf	___lwdiv@divisor^0,f,c
  1354   007BE4  2E0C               	decfsz	___lwdiv@counter^0,f,c
  1355   007BE6  EFDC  F03D         	goto	l978
  1356   007BEA                     l582:
  1357   007BEA  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  1358   007BEE  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1359   007BF2  0012               	return		;funcret
  1360   007BF4                     __end_of___lwdiv:
  1361                           	callstack 0
  1362   000000                     
  1363                           	psect	rparam
  1364   000000                     
  1365                           	psect	idloc
  1366                           
  1367                           ;Config register IDLOC0 @ 0x200000
  1368                           ;	unspecified, using default values
  1369   200000                     	org	2097152
  1370   200000  FF                 	db	255
  1371                           
  1372                           ;Config register IDLOC1 @ 0x200001
  1373                           ;	unspecified, using default values
  1374   200001                     	org	2097153
  1375   200001  FF                 	db	255
  1376                           
  1377                           ;Config register IDLOC2 @ 0x200002
  1378                           ;	unspecified, using default values
  1379   200002                     	org	2097154
  1380   200002  FF                 	db	255
  1381                           
  1382                           ;Config register IDLOC3 @ 0x200003
  1383                           ;	unspecified, using default values
  1384   200003                     	org	2097155
  1385   200003  FF                 	db	255
  1386                           
  1387                           ;Config register IDLOC4 @ 0x200004
  1388                           ;	unspecified, using default values
  1389   200004                     	org	2097156
  1390   200004  FF                 	db	255
  1391                           
  1392                           ;Config register IDLOC5 @ 0x200005
  1393                           ;	unspecified, using default values
  1394   200005                     	org	2097157
  1395   200005  FF                 	db	255
  1396                           
  1397                           ;Config register IDLOC6 @ 0x200006
  1398                           ;	unspecified, using default values
  1399   200006                     	org	2097158
  1400   200006  FF                 	db	255
  1401                           
  1402                           ;Config register IDLOC7 @ 0x200007
  1403                           ;	unspecified, using default values
  1404   200007                     	org	2097159
  1405   200007  FF                 	db	255
  1406                           
  1407                           	psect	config
  1408                           
  1409                           ;Config register CONFIG1L @ 0x300000
  1410                           ;	PLL Selection
  1411                           ;	PLLSEL = PLL4X, 4x clock multiplier
  1412                           ;	PLL Enable Configuration bit
  1413                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  1414                           ;	CPU System Clock Postscaler
  1415                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  1416                           ;	Low Speed USB mode with 48 MHz system clock
  1417                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  1418   300000                     	org	3145728
  1419   300000  00                 	db	0
  1420                           
  1421                           ;Config register CONFIG1H @ 0x300001
  1422                           ;	Oscillator Selection
  1423                           ;	FOSC = INTOSCIO, Internal oscillator
  1424                           ;	Primary Oscillator Shutdown
  1425                           ;	PCLKEN = ON, Primary oscillator enabled
  1426                           ;	Fail-Safe Clock Monitor
  1427                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1428                           ;	Internal/External Oscillator Switchover
  1429                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1430   300001                     	org	3145729
  1431   300001  28                 	db	40
  1432                           
  1433                           ;Config register CONFIG2L @ 0x300002
  1434                           ;	Power-up Timer Enable
  1435                           ;	nPWRTEN = ON, Power up timer enabled
  1436                           ;	Brown-out Reset Enable
  1437                           ;	BOREN = SBORDIS, BOR enabled in hardware (SBOREN is ignored)
  1438                           ;	Brown-out Reset Voltage
  1439                           ;	BORV = 190, BOR set to 1.9V nominal
  1440                           ;	Low-Power Brown-out Reset
  1441                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  1442   300002                     	org	3145730
  1443   300002  5E                 	db	94
  1444                           
  1445                           ;Config register CONFIG2H @ 0x300003
  1446                           ;	Watchdog Timer Enable bits
  1447                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  1448                           ;	Watchdog Timer Postscaler
  1449                           ;	WDTPS = 32768, 1:32768
  1450   300003                     	org	3145731
  1451   300003  3C                 	db	60
  1452                           
  1453                           ; Padding undefined space
  1454   300004                     	org	3145732
  1455   300004  FF                 	db	255
  1456                           
  1457                           ;Config register CONFIG3H @ 0x300005
  1458                           ;	CCP2 MUX bit
  1459                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  1460                           ;	PORTB A/D Enable bit
  1461                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  1462                           ;	Timer3 Clock Input MUX bit
  1463                           ;	T3CMX = RC0, T3CKI function is on RC0
  1464                           ;	SDO Output MUX bit
  1465                           ;	SDOMX = RB3, SDO function is on RB3
  1466                           ;	Master Clear Reset Pin Enable
  1467                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  1468   300005                     	org	3145733
  1469   300005  D3                 	db	211
  1470                           
  1471                           ;Config register CONFIG4L @ 0x300006
  1472                           ;	Stack Full/Underflow Reset
  1473                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1474                           ;	Single-Supply ICSP Enable bit
  1475                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  1476                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  1477                           ;	ICPRT = OFF, ICPORT disabled
  1478                           ;	Extended Instruction Set Enable bit
  1479                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  1480                           ;	Background Debugger Enable bit
  1481                           ;	DEBUG = 0x1, unprogrammed default
  1482   300006                     	org	3145734
  1483   300006  85                 	db	133
  1484                           
  1485                           ; Padding undefined space
  1486   300007                     	org	3145735
  1487   300007  FF                 	db	255
  1488                           
  1489                           ;Config register CONFIG5L @ 0x300008
  1490                           ;	Block 0 Code Protect
  1491                           ;	CP0 = OFF, Block 0 is not code-protected
  1492                           ;	Block 1 Code Protect
  1493                           ;	CP1 = OFF, Block 1 is not code-protected
  1494                           ;	Block 2 Code Protect
  1495                           ;	CP2 = OFF, Block 2 is not code-protected
  1496                           ;	Block 3 Code Protect
  1497                           ;	CP3 = OFF, Block 3 is not code-protected
  1498   300008                     	org	3145736
  1499   300008  0F                 	db	15
  1500                           
  1501                           ;Config register CONFIG5H @ 0x300009
  1502                           ;	Boot Block Code Protect
  1503                           ;	CPB = OFF, Boot block is not code-protected
  1504                           ;	Data EEPROM Code Protect
  1505                           ;	CPD = OFF, Data EEPROM is not code-protected
  1506   300009                     	org	3145737
  1507   300009  C0                 	db	192
  1508                           
  1509                           ;Config register CONFIG6L @ 0x30000A
  1510                           ;	Block 0 Write Protect
  1511                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  1512                           ;	Block 1 Write Protect
  1513                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  1514                           ;	Block 2 Write Protect
  1515                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  1516                           ;	Block 3 Write Protect
  1517                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  1518   30000A                     	org	3145738
  1519   30000A  0F                 	db	15
  1520                           
  1521                           ;Config register CONFIG6H @ 0x30000B
  1522                           ;	Configuration Registers Write Protect
  1523                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1524                           ;	Boot Block Write Protect
  1525                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  1526                           ;	Data EEPROM Write Protect
  1527                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1528   30000B                     	org	3145739
  1529   30000B  E0                 	db	224
  1530                           
  1531                           ;Config register CONFIG7L @ 0x30000C
  1532                           ;	Block 0 Table Read Protect
  1533                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  1534                           ;	Block 1 Table Read Protect
  1535                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  1536                           ;	Block 2 Table Read Protect
  1537                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  1538                           ;	Block 3 Table Read Protect
  1539                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  1540   30000C                     	org	3145740
  1541   30000C  0F                 	db	15
  1542                           
  1543                           ;Config register CONFIG7H @ 0x30000D
  1544                           ;	Boot Block Table Read Protect
  1545                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  1546   30000D                     	org	3145741
  1547   30000D  40                 	db	64
  1548                           tosu	equ	0xFFF
  1549                           tosh	equ	0xFFE
  1550                           tosl	equ	0xFFD
  1551                           stkptr	equ	0xFFC
  1552                           pclatu	equ	0xFFB
  1553                           pclath	equ	0xFFA
  1554                           pcl	equ	0xFF9
  1555                           tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           prodh	equ	0xFF4
  1560                           prodl	equ	0xFF3
  1561                           indf0	equ	0xFEF
  1562                           postinc0	equ	0xFEE
  1563                           postdec0	equ	0xFED
  1564                           preinc0	equ	0xFEC
  1565                           plusw0	equ	0xFEB
  1566                           fsr0h	equ	0xFEA
  1567                           fsr0l	equ	0xFE9
  1568                           wreg	equ	0xFE8
  1569                           indf1	equ	0xFE7
  1570                           postinc1	equ	0xFE6
  1571                           postdec1	equ	0xFE5
  1572                           preinc1	equ	0xFE4
  1573                           plusw1	equ	0xFE3
  1574                           fsr1h	equ	0xFE2
  1575                           fsr1l	equ	0xFE1
  1576                           bsr	equ	0xFE0
  1577                           indf2	equ	0xFDF
  1578                           postinc2	equ	0xFDE
  1579                           postdec2	equ	0xFDD
  1580                           preinc2	equ	0xFDC
  1581                           plusw2	equ	0xFDB
  1582                           fsr2h	equ	0xFDA
  1583                           fsr2l	equ	0xFD9
  1584                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     37      47
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    contador_down@numero	PTR unsigned short  size(2) Largest target is 2
		 -> main@numero(COMRAM[2]), 

    contador_up@numero	PTR unsigned short  size(2) Largest target is 2
		 -> main@numero(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_contador_down
    _contador_up->_mostrarDISPLAY
    _contador_down->_mostrarDISPLAY
    _mostrarDISPLAY->_descomponiendo
    _descomponiendo->___lwdiv
    ___lwdiv->___lwmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    8590
                                             32 COMRAM     5     5      0
                      _contador_down
                        _contador_up
                           _init_osc
                       _init_puertos
                     _mostrarDISPLAY
 ---------------------------------------------------------------------------------
 (1) _init_puertos                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_osc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _contador_up                                          4     2      2    2831
                                             26 COMRAM     4     2      2
                     _mostrarDISPLAY
 ---------------------------------------------------------------------------------
 (1) _contador_down                                        6     4      2    2831
                                             26 COMRAM     6     4      2
                     _mostrarDISPLAY
 ---------------------------------------------------------------------------------
 (1) _mostrarDISPLAY                                       4     2      2    2667
                                             22 COMRAM     4     2      2
                     _descomponiendo
 ---------------------------------------------------------------------------------
 (2) _descomponiendo                                      10     8      2    2199
                                             12 COMRAM    10     8      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4    1071
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _contador_down
     _mostrarDISPLAY
       _descomponiendo
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
   _contador_up
     _mostrarDISPLAY
   _init_osc
   _init_puertos
   _mostrarDISPLAY

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     25      2F       1       49.5%
BITBIGSFRhhl        3D      0       0      21        0.0%
BITBIGSFRhhh        2C      0       0      20        0.0%
BITBIGSFRlh         22      0       0      26        0.0%
BITBIGSFRlll         9      0       0      28        0.0%
BITBIGSFRhlll        8      0       0      25        0.0%
BITBIGSFRhlhl        6      0       0      23        0.0%
BITBIGSFRhllh        1      0       0      24        0.0%
BITBIGSFRhlhh        1      0       0      22        0.0%
BITBIGSFRllh         1      0       0      27        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2F      29        0.0%
DATA                 0      0      2F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Sep  3 15:29:03 2022

                     l42 7E1A                       l60 7AB6                       l57 7B1A  
                     l76 7C6E                       l68 7CEA                       l85 7FFE  
       ??_mostrarDISPLAY 0019                       l88 7DC4             ?_contador_up 001B  
                    l582 7BEA                      l592 7B76                      l852 7AAE  
                    l860 7AFA                      l589 7BF2                      l870 7B04  
                    l862 7AFC                      l854 7AEC                      l599 7B7E  
                    l880 7B0E                      l872 7B06                      l864 7AFE  
                    l856 7AF6                      l970 7B88                      l890 7B18  
                    l882 7B10                      l874 7B08                      l866 7B00  
                    l858 7AF8                      l980 7BBE                      l972 7B9A  
                    l884 7B12                      l876 7B0A                      l868 7B02  
                    l982 7BD4                      l974 7BA2                      l990 7B1C  
                    l886 7B14                      l878 7B0C                      l984 7BDC  
                    l976 7BAA                      l968 7B80                      l992 7B2E  
                    l888 7B16                      l986 7BDE                      l978 7BB8  
                    l994 7B36                      l988 7BE4                      l996 7B3E  
                    l998 7B4C                      u200 7BB8                      u201 7BB4  
                    u210 7BD4                      u211 7BD0                      u220 7B2E  
                    u300 7C6E                      u221 7B2A                      u301 7C6A  
                    u230 7B4C                      u310 7DF0                      u231 7B48  
                    u311 7DEC                      u240 7B62                      u320 7E16  
                    u241 7B5E                      u321 7E12            _contador_down 7BF4  
                    u250 7C7E                      u330 7E2A                      u251 7C7A  
                    u331 7E26                      u260 7C9C                      u340 7E64  
                    u261 7C98                      u341 7E60                      u190 7B9A  
                    u270 7CEA                      u350 7E86                      u191 7B96  
                    u407 7DB8                      u271 7CE6                      u351 7E82  
                    u280 7C02                      u360 7E9C                      u281 7BFE  
                    u361 7E98                      u290 7C1C                      u291 7C18  
                    u377 7D16                      u387 7D4C                      u397 7D82  
                    wreg 000FE8                     l1000 7B62                     l1002 7B6A  
                   l1010 7EF2                     l1004 7B70                     l1012 7F22  
                   l1020 7FFC                     l1100 7E64                     l1014 7F6E  
                   l1006 7ECE                     l1030 7D0E                     l1102 7E86  
                   l1110 7EC0                     l1008 7ED6                     l1040 7D56  
                   l1032 7D10                     l1104 7E9C                     l1018 7FC2  
                   l1050 7DB0                     l1042 7D58                     l1034 7D20  
                   l1106 7EA8                     l1132 7FD6                     l1052 7DB2  
                   l1044 7D7A                     l1036 7D22                     l1028 7CEC  
                   l1060 7C9C                     l1108 7EB0                     l1054 7DC2  
                   l1046 7D7C                     l1038 7D44                     l1070 7C1C  
                   l1062 7CC8                     l1048 7D8C                     l1072 7C4C  
                   l1064 7CDC                     l1056 7C70                     l1080 7DD6  
                   l1074 7C60                     l1066 7BF4                     l1058 7C7E  
                   l1090 7DFC                     l1082 7DDA                     l1068 7C02  
                   l1092 7E08                     l1084 7DE2                     l1076 7DC6  
                   l1094 7E16                     l1078 7DCE                     l1096 7E2A  
                   l1088 7DF4                     l1098 7E52                     _LATD 000F8C  
                   _main 7DC6                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     start 0000  
           ___param_bank 000000        contador_up@numero 001B           ?_contador_down 001B  
                  ?_main 0001                    _LATB3 007C53                    _LATB4 007C54  
                  _LATB5 007C55                    _LATB6 007C56          __end_of___lwdiv 7BF4  
        __end_of___lwmod 7B80                    _TRISD 000F95             main@selector 0023  
                  tablat 000FF5                    status 000FD8          __initialization 7AC2  
           __end_of_main 7ECC                   ??_main 0021            __activetblptr 000002  
                 _ANSELD 000F5E      contador_down@numero 001B            ?_init_puertos 0001  
              ??___lwdiv 000A                ??___lwmod 0005          ??_contador_down 001D  
       __end_of_init_osc 7AB8                   isa$std 000001             __pdataCOMRAM 0026  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 7AE2            ___rparam_used 000001  
         ??_init_puertos 0001           __pcstackCOMRAM 0001          descomponiendo@i 0013  
              ?_init_osc 0001                  __Hparam 0000                  __Lparam 0000  
                ___lwdiv 7B80                  ___lwmod 7B1C                  __pcinit 7AC2  
                __ramtop 0800                  __ptext0 7DC6                  __ptext1 7AEC  
                __ptext2 7AAE                  __ptext3 7C70                  __ptext4 7BF4  
                __ptext5 7CEC                  __ptext6 7ECC                  __ptext7 7B1C  
                __ptext8 7B80                  _display 0026     __end_of_init_puertos 7B1C  
   end_of_initialization 7AE2            __Lmediumconst 0000               ??_init_osc 0001  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE                _PORTBbits 000F81                _TRISBbits 000F93  
             main@numero 0024           _descomponiendo 7ECC            __pidataCOMRAM 7AB8  
  __end_of_contador_down 7C70            ??_contador_up 001D      start_initialization 7AC2  
 __end_of_descomponiendo 8000           _mostrarDISPLAY 7CEC     mostrarDISPLAY@numero 0017  
    __end_of_contador_up 7CEC         ___lwdiv@dividend 0006             _init_puertos 7AEC  
        ?_descomponiendo 000D                 ?___lwdiv 0006                 ?___lwmod 0001  
 __end_of_mostrarDISPLAY 7DC6         ___lwdiv@quotient 000A     descomponiendo@numero 000D  
      main@contador_auto 0021              _contador_up 7C70          ?_mostrarDISPLAY 0017  
     _descomponiendo$851 0014       _descomponiendo$852 0011                copy_data0 7AD6  
               __Hrparam 0000                 __Lrparam 0000               _ANSELBbits 000F5C  
        ___lwdiv@divisor 0008          ___lwdiv@counter 000C                 _init_osc 7AAE  
               isa$xinst 000000         ___lwmod@dividend 0001         ??_descomponiendo 000F  
             _OSCCONbits 000FD3          ___lwmod@divisor 0003          ___lwmod@counter 0005  
descomponiendo@resultado 0016  
